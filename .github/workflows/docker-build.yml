name: Docker Build and Test

on:
  push:
    branches: [main, develop]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'docker-compose*.yml'
      - '**/Dockerfile*'
      - '.github/workflows/docker-build.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'docker-compose*.yml'
      - '**/Dockerfile*'
      - '.github/workflows/docker-build.yml'

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}/backend
  FRONTEND_IMAGE_NAME: ${{ github.repository }}/frontend

jobs:
  build-backend:
    name: Build Backend Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test backend image
        run: |
          docker build -t test-backend ./backend
          docker run --rm test-backend node --version
          docker run --rm test-backend npm --version

  build-frontend:
    name: Build Frontend Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test frontend image
        run: |
          docker build -t test-frontend ./frontend
          docker run --rm -d -p 8080:80 --name test-frontend test-frontend
          sleep 5
          curl -f http://localhost:8080/health || exit 1
          docker stop test-frontend

  validate-compose:
    name: Validate Docker Compose
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate docker-compose.dev.yml
        run: docker compose -f docker-compose.dev.yml config

      - name: Validate docker-compose.prod.yml
        run: docker compose -f docker-compose.prod.yml config

      - name: Validate docker-compose.test.yml
        run: docker compose -f docker-compose.test.yml config

  security-scan:
    name: Security Scan Docker Images
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build images for scanning
        run: |
          docker build -t scan-backend ./backend
          docker build -t scan-frontend ./frontend

      - name: Run Trivy vulnerability scanner on backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: scan-backend
          format: 'sarif'
          output: 'trivy-backend-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Run Trivy vulnerability scanner on frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: scan-frontend
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v4
        if: always()
        with:
          sarif_file: '.'

  report-image-sizes:
    name: Report Image Sizes
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build images
        run: |
          docker build -t size-backend ./backend
          docker build -t size-frontend ./frontend

      - name: Get image sizes
        id: sizes
        run: |
          BACKEND_SIZE=$(docker images size-backend --format "{{.Size}}")
          FRONTEND_SIZE=$(docker images size-frontend --format "{{.Size}}")
          echo "backend=$BACKEND_SIZE" >> $GITHUB_OUTPUT
          echo "frontend=$FRONTEND_SIZE" >> $GITHUB_OUTPUT

      - name: Comment image sizes on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const backendSize = '${{ steps.sizes.outputs.backend }}';
            const frontendSize = '${{ steps.sizes.outputs.frontend }}';
            const body = `## üê≥ Docker Image Sizes
            
            | Image | Size |
            |-------|------|
            | Backend | ${backendSize} |
            | Frontend | ${frontendSize} |
            
            Built from commit: ${context.sha}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
