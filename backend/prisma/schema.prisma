// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  MODERATOR
  BANNED
}

model PresenceEvent {
  id          Int      @id @default(autoincrement())
  userId      String
  username    String
  clients     String    // comma-separated: "desktop,web"
  createdAt   DateTime  @default(now())
}

model TypingEvent {
  id        Int      @id @default(autoincrement())
  userId    String
  username  String
  channelId String
  channel   String
  guildId   String
  createdAt DateTime @default(now())
}

model MessageEvent {
  id        Int      @id @default(autoincrement())
  userId    String
  username  String
  channelId String
  channel   String
  guildId   String
  content   String
  createdAt DateTime @default(now())
}

model JoinEvent {
  id             Int      @id @default(autoincrement())
  userId         String
  username       String
  guildId        String
  accountAgeDays Int
  createdAt      DateTime @default(now())
}

model DeletedMessageEvent {
  id        Int      @id @default(autoincrement())
  userId    String
  username  String
  channelId String
  channel   String
  guildId   String
  createdAt DateTime @default(now())
}

model ReactionTime {
  id           Int      @id @default(autoincrement())
  observerId   String
  observerName String
  actorId      String
  actorName    String
  channelId    String
  guildId      String
  deltaMs      Int
  createdAt    DateTime @default(now())
}

model RoleChangeEvent {
  id         Int      @id @default(autoincrement())
  userId     String
  username   String
  guildId    String
  addedRoles String   // comma-separated role IDs or names
  createdAt  DateTime @default(now())
}

model BlockedIP {
  id        Int      @id @default(autoincrement())
  ip        String   @unique
  reason    String?
  createdAt DateTime @default(now())
}

model WhitelistedIP {
  id        Int      @id @default(autoincrement())
  ip        String   @unique
  reason    String?  // Why this IP is whitelisted (e.g., "Office IP", "Admin")
  createdAt DateTime @default(now())
}

model BannedUser {
  id        Int      @id @default(autoincrement())
  userId    String   @unique
  username  String
  reason    String?
  createdAt DateTime @default(now())
}

model User {
  id                    String   @id @default(cuid())
  discordId             String   @unique
  username              String
  discriminator         String
  avatar                String?
  email                 String?
  locale                String?
  verified              Boolean
  ipAddress             String?
  userAgent             String?
  accessToken           String
  refreshToken          String
  refreshTokenIssuedAt  DateTime @default(now())
  accessTokenExpiresAt  DateTime
  lastSeenAt            DateTime
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // New role field
  role                  Role     @default(USER)

  guilds                Guild[]
  refreshTokens         RefreshToken[]
  sessions              Session[]
  apiKeys               ApiKey[]
  loginLogs             LoginLog[]
  deletionRequest       DeletionRequest?
  consentLogs           ConsentLog[]
}

model Guild {
  id          String   @id @default(cuid())
  guildId     String   @unique
  name        String
  icon        String?
  owner       Boolean
  permissions BigInt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model Permission {
  id          String           @id @default(cuid())
  name        String           @unique // e.g., "analytics.view", "users.ban"
  description String
  category    String           // e.g., "analytics", "admin"
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  roles       RolePermission[]
}

model RolePermission {
  role         Role       
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  
  @@id([role, permissionId])
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  familyId  String   // For token rotation detection
  used      Boolean  @default(false)
  revoked   Boolean  @default(false)
  expiresAt DateTime
  userAgent String?
  ipAddress String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([familyId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  userAgent    String?
  ipAddress    String?
  lastActivity DateTime @default(now())
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model ApiKey {
  id          String   @id @default(cuid())
  key         String   @unique
  name        String
  userId      String
  scopes      String   // JSON array of scopes/permissions
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

model LoginLog {
  id         String   @id @default(cuid())
  userId     String
  ipAddress  String
  userAgent  String?
  success    Boolean
  reason     String?  // Failure reason if success=false
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([createdAt])
}

// GDPR Compliance Models

model DeletionRequest {
  id           String   @id @default(cuid())
  userId       String   @unique
  reason       String?
  requestedAt  DateTime @default(now())
  scheduledFor DateTime
  status       String   @default("PENDING") // PENDING, CANCELLED, COMPLETED
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String   // ACCOUNT_CREATED, DATA_EXPORTED, ACCOUNT_DELETED, etc.
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([createdAt])
  @@index([action])
}

model ConsentLog {
  id          String   @id @default(cuid())
  userId      String
  consentType String   // PRIVACY_POLICY, COOKIES, DATA_COLLECTION
  granted     Boolean
  version     String   // Policy version
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([consentType])
}

model DataRetentionPolicy {
  id              String   @id @default(cuid())
  dataType        String   @unique // PRESENCE_EVENTS, MESSAGE_EVENTS, TYPING_EVENTS, etc.
  retentionDays   Int      // Number of days to retain data
  description     String?
  enabled         Boolean  @default(true)
  lastCleanupAt   DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
