# =============================================================================
# Discord SpyWatcher - Backend Environment Configuration
# =============================================================================
# Copy this file to .env and fill in your actual values
# DO NOT commit the .env file to version control
# =============================================================================

# -----------------------------------------------------------------------------
# Environment
# -----------------------------------------------------------------------------
# Options: development, staging, production, test
NODE_ENV=development

# -----------------------------------------------------------------------------
# Server Configuration
# -----------------------------------------------------------------------------
# Port the backend server will listen on
PORT=3001

# -----------------------------------------------------------------------------
# Database
# -----------------------------------------------------------------------------
# PostgreSQL connection string
# Format: postgresql://username:password@host:port/database
DATABASE_URL=postgresql://user:password@localhost:5432/spywatcher

# Redis connection string (for rate limiting and caching)
# Format: redis://[[username]:[password]@][host][:port][/db-number]
# Example: redis://localhost:6379 or redis://:password@localhost:6379
REDIS_URL=redis://localhost:6379

# -----------------------------------------------------------------------------
# Discord Configuration
# -----------------------------------------------------------------------------
# Bot token from Discord Developer Portal
# Obtain from: https://discord.com/developers/applications
DISCORD_BOT_TOKEN=your_bot_token_here_min_50_chars_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# OAuth2 Client ID from Discord Developer Portal
DISCORD_CLIENT_ID=your_client_id_here

# OAuth2 Client Secret from Discord Developer Portal
DISCORD_CLIENT_SECRET=your_client_secret_here_min_20_chars

# OAuth2 Redirect URI (must match Discord OAuth2 settings)
DISCORD_REDIRECT_URI=http://localhost:5173/auth/callback

# Optional: Specific guild ID for single-server mode
DISCORD_GUILD_ID=

# Comma-separated list of guild IDs the bot should monitor
# Example: 123456789012345678,987654321098765432
BOT_GUILD_IDS=

# Comma-separated list of Discord user IDs with admin privileges
# Example: 123456789012345678,987654321098765432
ADMIN_DISCORD_IDS=

# -----------------------------------------------------------------------------
# JWT (JSON Web Token) Configuration
# -----------------------------------------------------------------------------
# Secret key for signing access tokens (minimum 32 characters)
# Generate with: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
JWT_SECRET=your-super-secret-jwt-key-min-32-chars-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# Secret key for signing refresh tokens (minimum 32 characters)
# Should be different from JWT_SECRET
JWT_REFRESH_SECRET=your-super-secret-refresh-key-min-32-chars-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# Access token expiration time (examples: 15m, 1h, 1d)
JWT_ACCESS_EXPIRES_IN=15m

# Refresh token expiration time (examples: 7d, 30d, 90d)
JWT_REFRESH_EXPIRES_IN=7d

# -----------------------------------------------------------------------------
# CORS (Cross-Origin Resource Sharing)
# -----------------------------------------------------------------------------
# Comma-separated list of allowed origins
# Example: http://localhost:5173,http://127.0.0.1:5173,https://yourdomain.com
CORS_ORIGINS=http://localhost:5173,http://127.0.0.1:5173

# -----------------------------------------------------------------------------
# Feature Flags
# -----------------------------------------------------------------------------
# Enable/disable rate limiting middleware
ENABLE_RATE_LIMITING=true

# Enable/disable IP blocking middleware
ENABLE_IP_BLOCKING=true

# Enable/disable distributed rate limiting (requires Redis)
# When disabled, uses in-memory rate limiting (not suitable for multi-instance)
ENABLE_REDIS_RATE_LIMITING=true

# Enable/disable load shedding under high server load
ENABLE_LOAD_SHEDDING=true

# Logging level: error, warn, info, debug
LOG_LEVEL=info

# -----------------------------------------------------------------------------
# Optional: Frontend URL
# -----------------------------------------------------------------------------
# Used for redirects and CORS (if needed)
FRONTEND_URL=http://localhost:5173

# -----------------------------------------------------------------------------
# Security Alerts & Monitoring
# -----------------------------------------------------------------------------
# Discord webhook URL for security alerts (optional)
# Create a webhook in Discord Server Settings > Integrations > Webhooks
DISCORD_ALERT_WEBHOOK=

# Slack webhook URL for security alerts (optional)
# Create a webhook in Slack workspace settings
SLACK_ALERT_WEBHOOK=

# -----------------------------------------------------------------------------
# Sentry Error Tracking & APM (optional)
# -----------------------------------------------------------------------------
# Sentry DSN (Data Source Name) from your Sentry project
# Obtain from: Sentry Project Settings > Client Keys (DSN)
# Example: https://examplePublicKey@o0.ingest.sentry.io/0
SENTRY_DSN=

# Sentry environment (defaults to NODE_ENV if not set)
# Examples: development, staging, production
SENTRY_ENVIRONMENT=

# Sentry release version for tracking deployments
# Can be a git commit SHA, version number, or any unique identifier
# Example: backend@1.0.0 or abc123def456
SENTRY_RELEASE=

# Sentry performance monitoring sample rate (0.0 to 1.0)
# 0.0 = no performance monitoring, 1.0 = monitor 100% of transactions
# Recommended: 0.1 (10%) for production to reduce overhead
SENTRY_TRACES_SAMPLE_RATE=0.1

# Sentry error sample rate (0.0 to 1.0)
# 0.0 = no errors captured, 1.0 = capture 100% of errors
# Recommended: 1.0 (100%) to capture all errors
SENTRY_SAMPLE_RATE=1.0

# =============================================================================
# Additional Notes
# =============================================================================
# 
# Security Best Practices:
# - Never commit the .env file to version control
# - Use strong, randomly generated secrets for JWT keys
# - Rotate secrets regularly in production
# - Use environment-specific configuration files for different deployments
# - Store production secrets in a secure secret management system
#
# Environment-Specific Files:
# - .env.development - Development environment
# - .env.staging - Staging environment
# - .env.production - Production environment (use secret manager instead)
# - .env.test - Test environment
#
# For more information, see the project documentation.
# =============================================================================
